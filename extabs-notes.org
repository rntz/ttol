* Stuff.

Our first blah was some sort of modal logic. (Brief description of modal logic
finishing paragraph here. explicitly talk about possible worlds.)

What suggested modal logic to us was that the box or necessity operator has been
shown to model mobile types. (stuff on mobility, ref tom's thesis). mobility
corresponds to modal logic because "possible worlds" model nodes at which code
can run; a necessary proposition is the type of code that can run on any node.

Libraries are akin to mobile code: libraries are stored on-disk in a format
portable among and executable on any machine understanding the corresponding
file format and machine code---at least, as long as they can fulfill the
library's dependencies. But that turns out to be exactly the problem: modal
logic gives us no good way to represent libraries with dependencies.

(Explain modal logic here)

* Problems

"Modal logic gives us no good way to represent dependencies."

(What about box(box(A) -> box(B))?)

(let box u = (blah : box(box(A) -> box(B))) in u (blah : box(A)) end)

* Story

- Note first that we're not handling circular library dependencies.

- Libraries are like code with named holes in it (dependencies). Hrm, that looks
  a lot a function! (Note re this view requires noncircularity.)

- Intro modal logic. Initial thought was extension to modal logic. Note re modal
  logic and mobility, confirm suspicions.

- Adjoint logic: lets us put things in the upper layer.

  Lets us express "superstructure" of necessary/mobile things beyond ordinary
  terms.

- Polymorphism. Are type variables necessary or contingent?

- Note regarding suspensions versus values, why we chose values, how this breaks
  exact correspondence with modal logic.

- Initial lambda-calculus.

- Story re partial evaluation.
- Story re canonical/atomic forms.
